<skuid__page unsavedchangeswarning="yes" personalizationmode="server" showsidebar="false" showheader="true">
	<background type="none"/>
	<models>
		<model id="pages" query="true" processonclient="true" type="readwrite" datasource="salesforce" label="Page" labelplural="Pages" namefield="name" uniqueId="sk-3dKp-1466" sobject="skuid__Page__c" orderby="LastModifiedDate DESC" limit="20">
			<fields uniqueId="sk-3dKp-1472">
				<field id="skuid__API_Version__c"/>
				<field id="skuid__MasterPage__c"/>
				<field id="skuid__MasterPage__r.Name"/>
				<field id="Id"/>
				<field id="skuid__IsMaster__c"/>
				<field id="Name"/>
				<field id="LastModifiedDate"/>
				<field id="skuid__MasterPage__r.Id"/>
			</fields>
			<idfields>
				<field>id</field>
			</idfields>
			<conditions logic="" uniqueId="sk-3dKp-1484">
				<condition type="blank" value="null" field="skuid__MasterPage__c" fieldtargetobjects="skuid__Page__c" operator="=" enclosevalueinquotes="false" state="filterableoff" inactive="true" name="skuid__MasterPage__c"/>
				<condition type="fieldvalue" enclosevalueinquotes="true" field="skuid__API_Version__c" clientorserver="server" state="filterableoff" inactive="true" name="skuid__API_Version__c"/>
				<condition type="fieldvalue" value="false" enclosevalueinquotes="false" field="skuid__IsMaster__c"/>
			</conditions>
			<actions uniqueId="sk-3dKp-1485"/>
		</model>
		<model id="variableStore" query="true" createrowifnonefound="false" datasource="Ui-Only" processonclient="true">
			<fields>
				<field id="oldContent" displaytype="TEXT" length="255" defaultvaluetype="fieldvalue" defaultValue="old" label="oldContent"/>
				<field id="newContent" displaytype="TEXT" length="255" defaultvaluetype="fieldvalue" defaultValue="new" label="newContent"/>
				<field id="masterPageId" displaytype="TEXT" length="255" label="masterPageId"/>
				<field id="masterPageContent" displaytype="TEXT" length="255" label="masterPageContent" defaultvaluetype="fieldvalue"/>
				<field id="masterPageName" displaytype="TEXT" length="255" label="masterPageName"/>
				<field id="newName" displaytype="TEXT" length="255" label="Name"/>
				<field id="apiVersion" displaytype="TEXT" length="255"/>
			</fields>
			<conditions/>
			<actions/>
		</model>
		<model id="masterPages" query="false" processonclient="true" type="readwrite" datasource="salesforce" label="Page" labelplural="Pages" namefield="name" uniqueId="sk-3dKp-1466" sobject="skuid__Page__c" orderby="LastModifiedDate DESC" limit="20">
			<fields uniqueId="sk-3dKp-1472">
				<field id="skuid__IsMaster__c"/>
				<field id="Name"/>
				<field id="Id"/>
				<field id="LastModifiedDate"/>
				<field id="skuid__API_Version__c"/>
			</fields>
			<idfields>
				<field>id</field>
			</idfields>
			<conditions logic="" uniqueId="sk-3dKp-1484">
				<condition type="modelmerge" value="" field="skuid__API_Version__c" clientorserver="server" inactive="false" operator="=" model="variableStore" enclosevalueinquotes="true" mergefield="apiVersion" novaluebehavior="deactivate"/>
				<condition type="fieldvalue" value="true" enclosevalueinquotes="false" field="skuid__IsMaster__c"/>
			</conditions>
			<actions uniqueId="sk-3dKp-1485"/>
		</model>
		<model id="pages_retrieveXML" query="false" processonclient="true" type="readwrite" datasource="salesforce" label="Page" labelplural="Pages" namefield="name" uniqueId="sk-3dKp-1466" sobject="skuid__Page__c" limit="1">
			<fields uniqueId="sk-3dKp-1472">
				<field id="skuid__Layout__c"/>
				<field id="skuid__Layout2__c"/>
				<field id="skuid__Layout3__c"/>
				<field id="skuid__Layout4__c"/>
				<field id="skuid__Layout5__c"/>
				<field id="Id"/>
				<field id="skuid__API_Version__c"/>
				<field id="skuid__MasterPage__c"/>
				<field id="skuid__MasterPage__r.Name"/>
				<field id="Name"/>
			</fields>
			<idfields>
				<field>id</field>
			</idfields>
			<conditions logic="" uniqueId="sk-3dKp-1484">
				<condition type="fieldvalue" value="" enclosevalueinquotes="true" field="Id" state="filterableon" inactive="false" name="Id" clientorserver="server"/>
				<condition type="modelmerge" value="" field="skuid__API_Version__c" clientorserver="server" inactive="false" operator="=" model="variableStore" enclosevalueinquotes="true" mergefield="apiVersion" novaluebehavior="deactivate"/>
			</conditions>
			<actions uniqueId="sk-3dKp-1485"/>
		</model>
		<model id="masterPages_retrieveXML" query="false" processonclient="true" type="readwrite" datasource="salesforce" label="Page" labelplural="Pages" namefield="name" uniqueId="sk-3dKp-1466" sobject="skuid__Page__c" limit="1">
			<fields uniqueId="sk-3dKp-1472">
				<field id="skuid__Layout__c"/>
				<field id="skuid__Layout2__c"/>
				<field id="skuid__Layout3__c"/>
				<field id="skuid__Layout4__c"/>
				<field id="skuid__Layout5__c"/>
				<field id="Id"/>
				<field uionly="true" displaytype="FORMULA" ogdisplaytype="TEXT" readonly="true" returntype="TEXT" id="fullXML" label="Full XML">
					<formula>{{skuid__Layout__c}} +
{{skuid__Layout2__c}} +
{{skuid__Layout3__c}} +
{{skuid__Layout4__c}} +
{{skuid__Layout5__c}}</formula>
				</field>
			</fields>
			<idfields>
				<field>id</field>
			</idfields>
			<conditions logic="" uniqueId="sk-3dKp-1484">
				<condition type="fieldvalue" value="" enclosevalueinquotes="true" field="Id" state="filterableon" inactive="false" name="Id"/>
				<condition type="modelmerge" value="" field="skuid__API_Version__c" clientorserver="server" inactive="false" operator="=" model="variableStore" enclosevalueinquotes="true" mergefield="apiVersion" novaluebehavior="deactivate"/>
			</conditions>
			<actions uniqueId="sk-3dKp-1485"/>
		</model>
	</models>
	<components>
		<skuid__table uniqueid="sk-NbK-453" allowColumnOrdering="false" resetPaginationOnQuery="false" showListHeader="true" showListFooter="true" mode="readonly" model="pages" pageSize="10" showSaveCancel="false" showErrorsInline="true" rowHeightStrategy="fit" allowColumnHiding="false" allowSortingByColumn="false">
			<fields>
				<field uniqueid="fi-Neo-1934" hideable="trueShowByDefault" id="Name" redirectType="customurl" rootUrl="/apex/skuid__PageBuilder?id={{Id}}" window="blank"/>
				<field uniqueid="fi-NbK-454" id="skuid__API_Version__c" hideable="trueShowByDefault"/>
				<field uniqueid="fi-NbK-455" id="skuid__MasterPage__c" pageSize="5" tokenizeSearch="false" displayTemplate="{{Name}}" redirectType="customurl" window="blank" rootUrl="/apex/skuid__PageBuilder?id={{skuid__MasterPage__r.Id}}"/>
			</fields>
			<filters>
				<skuid__filter uniqueId="sk-2WJv-17891" type="select" conditionSource="manual" filterMethod="server" labelMode="manual" label="API Version" conditionName="skuid__API_Version__c" createFilterOffOption="true" filterOffOptionLabel="All Versions">
					<sources>
						<source type="manual" effectsbehavior="justdefault">
							<options>
								<option label="v1" type="simple" value="v1"/>
								<option label="v2" type="simple" value="v2"/>
							</options>
						</source>
					</sources>
				</skuid__filter>
			</filters>
			<actions/>
			<massActions/>
			<rowActions>
				<action type="multi" label="Convert to normal page" icon="sk-webicon-font-awesome:chain-broken">
					<renderConditions logictype="and">
						<rendercondition type="fieldvalue" operator="!=" enclosevalueinquotes="false" fieldmodel="pages" sourcetype="fieldvalue" field="skuid__IsMaster__c" fieldtargetobjects="skuid__Page__c" value="true"/>
						<rendercondition type="blank" operator="!=" fieldmodel="pages" sourcetype="fieldvalue" field="skuid__MasterPage__c" fieldtargetobjects="skuid__Page__c" value="null" enclosevalueinquotes="false"/>
					</renderConditions>
					<actions>
						<action type="action-sequence" action-sequence-id="7985ede6-a4b4-4f6e-8c56-8674c3e389f7">
							<inputs>
								<input name="pageId" value="{{Id}}"/>
								<input name="PageId" value="{{Id}}"/>
								<input name="Id" value="{{Id}}"/>
								<input name="apiVersion" value="{{skuid__API_Version__c}}"/>
							</inputs>
						</action>
					</actions>
				</action>
				<action type="multi" label="Convert to child page" icon="sk-webicon-font-awesome:sitemap">
					<renderConditions logictype="and">
						<rendercondition type="blank" operator="=" fieldmodel="pages" sourcetype="fieldvalue" field="skuid__MasterPage__c" fieldtargetobjects="skuid__Page__c" value="null" enclosevalueinquotes="false"/>
					</renderConditions>
					<actions>
						<action type="action-sequence" action-sequence-id="5471bffe-9f90-4148-a366-6236fd20f4f2">
							<inputs>
								<input name="pageId" value="{{Id}}"/>
								<input name="PageId" value="{{Id}}"/>
								<input name="Id" value="{{Id}}"/>
								<input name="apiVersion" value="{{skuid__API_Version__c}}"/>
							</inputs>
						</action>
					</actions>
				</action>
			</rowActions>
			<sorting/>
			<filtering enableSearch="true" searchMethod="server"/>
			<exportProperties useTableColumns="true" enableExportOptionOnTable="false"/>
		</skuid__table>
	</components>
	<resources>
		<javascript>
			<jsitem location="inlinesnippet" cachelocation="false" name="childPageToNormalPage">// childPageToNormalPage
console.log('Starting conversion')
// Skuid variables
var variableStore = skuid.$M('variableStore')
var r = variableStore.getFirstRow()
var oldContent = r.oldContent

// Handle the XML
var parser = new DOMParser();
var xmlDoc = parser.parseFromString(oldContent, "text/xml");

// Now get all the old components into an array
pageRegions = Array.prototype.slice.call(xmlDoc.getElementsByTagName('pageregioncontent'))
components = []
pageRegions.forEach(function(region){
    if (region.children[0]) {
        for (let component of region.children[0].children) {
            components.push(component)}
    } else
    {
        console.log('Page region has no components, moving on.')
    }
})

// Collate all the components into a new node on the new page
var newComponentsNode = xmlDoc.createElement("components");
components.forEach(function(c){
  newComponentsNode.append(c)
})

// Remove the page regions node
var skuidPage = (r.apiVersion=='v2') ? xmlDoc.getElementsByTagName('skuid__page')[0] : xmlDoc.getElementsByTagName('skuidpage')[0]

var pageRegionContents = xmlDoc.getElementsByTagName('pageregioncontents')[0]
skuidPage.removeChild(pageRegionContents)

// Move the components node beneath models node
xmlDoc.getElementsByTagName('models')[0].after(newComponentsNode)
// Stringify the XML and update the model row
var oSerializer = new XMLSerializer();
var sXML = oSerializer.serializeToString(xmlDoc);
variableStore.updateRow(r,{newContent: sXML})</jsitem>
			<jsitem location="inlinesnippet" name="normalPageToChildPage" cachelocation="false">// normalPageToChildPage
console.log('Starting conversion')
// Skuid variables
var pagesModel = skuid.$M('pages')
var variableStore = skuid.$M('variableStore')
var r = variableStore.getFirstRow()
var oldContent = r.oldContent
var masterPage = r.masterPageContent

// Handle the XML
var parser = new DOMParser();
var masterPageXml = parser.parseFromString(masterPage, "text/xml");
var xmlDoc = parser.parseFromString(oldContent, "text/xml");
var skuidPage = (r.apiVersion=='v2') ? xmlDoc.getElementsByTagName('skuid__page')[0] : xmlDoc.getElementsByTagName('skuidpage')[0]

// Get all page region areas in master page
var pageRegionAreas = (r.apiVersion=='v2')? Array.prototype.slice.call(masterPageXml.getElementsByTagName('skuid__pageRegion')): Array.prototype.slice.call(masterPageXml.getElementsByTagName('pageregion'))

if (pageRegionAreas.length === 0) {
  throw ("The chosen master page has no page regions. Please update the page and try again.")
} else {
  // Create pageregionscontents node to nest all pageregioncontent nodes
  var pageregioncontents = xmlDoc.createElement("pageregioncontents");
  xmlDoc.getElementsByTagName('models')[0].after(pageregioncontents)

  // Parse existing page regions, and create nodes for child page
  pageRegionAreas.forEach(function (pra) {
    var regionid = pra.getAttribute('uniqueid')
    newPageRegion = xmlDoc.createElement("pageregioncontent");
    newPageRegion.setAttribute("regionid", regionid)
    newPageRegion.setAttribute('uniqueid', skuid.utils.generateUniqueId())
    pageregioncontents.append(newPageRegion)
  })

  // Now get all the old components into an array
  components = []
  var arrayOfComponentNodes = Array.prototype.slice.call(xmlDoc.getElementsByTagName('components'))
  arrayOfComponentNodes.forEach(function (cn) {
    if (cn.parentElement == skuidPage){
      arrayOfComponents = Array.prototype.slice.call(cn.children)
      arrayOfComponents.forEach(function (c) {
        components.push(c)
      })
    }
  })

  // Collate all the components into a new node on the new page
  var newComponentsNode = xmlDoc.createElement("components");
  components.forEach(function (c) {
    newComponentsNode.append(c)
  })

  // Clean up the nodes
  arrayOfComponentNodes.forEach(function (ocn) {
    if (ocn.parentElement == skuidPage) {
      skuidPage.removeChild(ocn)
    }
  })

  // Move the components node beneath models node
  xmlDoc.getElementsByTagName('pageregioncontent')[0].append(newComponentsNode)

  // Stringify the XML and update the model row
  var oSerializer = new XMLSerializer();
  var sXML = oSerializer.serializeToString(xmlDoc);
  variableStore.updateRow(r, { newContent: sXML })
}</jsitem>
			<jsitem location="inlinesnippet" name="getLayoutFieldsAndUpdateVariableStore" cachelocation="false">var params = arguments[0]
var variableStore = skuid.$M('variableStore')
var r = variableStore.getFirstRow()
console.log("params: ", params)

if(params.$Input.pagetype == "master") {
  var pagesModel = skuid.$M('masterPages_retrieveXML');
  variableStore.updateRow(r,{masterPageContent: pagesModel.getFieldValues(pagesModel.getFirstRow(),skuid.utils.getLayoutFields(),true).join("")});
} else {
    var pagesModel = skuid.$M('pages_retrieveXML');
    variableStore.updateRow(r,{oldContent: pagesModel.getFieldValues(pagesModel.getFirstRow(),skuid.utils.getLayoutFields(),true).join("")});
}



</jsitem>
			<jsitem location="inlinesnippet" name="groupLayoutFieldsAndUpdatePagesModel" cachelocation="false">var pagesModel = skuid.$M('pages_retrieveXML')
var variableStore = skuid.$M('variableStore')
var r = variableStore.getFirstRow()
// Save the page
skuid.utils.writeXmlToPageLayoutFields(r.newContent, pagesModel, pagesModel.getFirstRow());</jsitem>
		</javascript>
		<actionsequences uniqueid="sk-3P_R-725">
			<actionsequence id="8dabbb26-bf41-4f73-97b0-ef87a3d05ca9" label="createNewPageFromConvertedContent" type="reusable" uniqueid="sk-3P_R-726">
				<actions>
					<action type="emptyModelData">
						<models>
							<model>pages_retrieveXML</model>
						</models>
					</action>
					<action type="createRow" model="pages_retrieveXML" appendorprepend="prepend" defaultmodefornewitems="edit" affectedrows="context">
						<defaults>
							<default valuesource="fieldvalue" field="Name" enclosevalueinquotes="true" value="{{$Model.variableStore.data.0.newName}}"/>
							<default valuesource="fieldvalue" field="skuid__API_Version__c" enclosevalueinquotes="true" value="{{$Model.variableStore.data.0.apiVersion}}" sourcemodel="variableStore" sourcefield="apiVersion"/>
						</defaults>
					</action>
					<action type="branch" whenfinished="continue" model="variableStore">
						<formula>{{masterPageId}}</formula>
						<iftrueactions>
							<action type="updateRow" fieldmodel="pages_retrieveXML" affectedrows="context">
								<updates>
									<update valuesource="fieldvalue" value="{{$Model.variableStore.data.0.masterPageId}}" field="skuid__MasterPage__c" fieldtargetobjects="skuid__Page__c" enclosevalueinquotes="true"/>
								</updates>
							</action>
						</iftrueactions>
					</action>
					<action type="custom" snippet="groupLayoutFieldsAndUpdatePagesModel"/>
					<action type="blockUI" message="Saving new page..."/>
					<action type="save" rollbackonanyerror="true">
						<models>
							<model>pages_retrieveXML</model>
						</models>
						<onerroractions>
							<action type="cancel" message="There was an error" timeout="3000">
								<models>
									<model>pages_retrieveXML</model>
								</models>
							</action>
							<action type="blockUI" message="There was an error. Ensure your new page name is unique." timeout="3000"/>
						</onerroractions>
					</action>
					<action type="action-sequence" action-sequence-id="25e9872b-0c61-4447-81f4-4325508f5578"/>
					<action type="unblockUI"/>
					<action type="requeryModels" behavior="standard">
						<models>
							<model>pages</model>
						</models>
					</action>
				</actions>
				<description>Uses the currently stored name and content variables to create a new row on the pages model and save it. If the variable store has a master page ID, we're trying to save a new child page, so there's a branch to account for that.</description>
				<inputs/>
			</actionsequence>
			<actionsequence id="3fd5a006-aecc-4f5a-88bc-0f21be565b1e" label="showMasterPageList" type="reusable" uniqueid="sk-3Tqu-4752">
				<actions>
					<action type="requeryModels" behavior="standard">
						<models>
							<model>masterPages</model>
						</models>
					</action>
					<action type="showModal">
						<skuid__modal title="Master page" width="90%">
							<components>
								<skuid__text uniqueid="sk-3Us7-5276" contents="Which master page would you like to use?"/>
								<skuid__table uniqueid="select-master-page" allowColumnOrdering="true" resetPaginationOnQuery="false" showListHeader="true" showListFooter="true" mode="readonly" model="masterPages" pageSize="10" showSaveCancel="false" showErrorsInline="true" rowHeightStrategy="fit" allowColumnHiding="true" allowSortingByColumn="false">
									<fields>
										<field uniqueid="fi-Nwy-1196" hideable="trueShowByDefault" id="Name" redirectType="customurl" window="blank" rootUrl="/apex/skuid__PageBuilder?id={{Id}}"/>
										<field id="skuid__API_Version__c" uniqueid="fi-2WKC-25568"/>
									</fields>
									<actions/>
									<massActions/>
									<rowActions>
										<action type="multi" label="Use as master page" icon="sk-webicon-font-awesome:magic">
											<actions>
												<action type="updateCondition" model="masterPages_retrieveXML" condition="Id" value="{{Id}}" behavior="set" valuesource="fieldvalue"/>
												<action type="requeryModels" behavior="standard">
													<models>
														<model>masterPages_retrieveXML</model>
													</models>
												</action>
												<action type="action-sequence" action-sequence-id="3d565e23-0f20-47e2-8a77-f9d651b777fe">
													<inputs>
														<input name="pagetype" value="master"/>
													</inputs>
												</action>
												<action type="updateRow" model="variableStore" appendorprepend="prepend" defaultmodefornewitems="edit" affectedrows="context" fieldmodel="variableStore">
													<defaults>
														<default valuesource="fieldvalue" field="masterPageId" enclosevalueinquotes="true" value="{{id}}"/>
														<default valuesource="fieldvalue" field="masterPageContent" enclosevalueinquotes="true" value="{{content}}"/>
													</defaults>
													<updates>
														<update valuesource="fieldvalue" field="masterPageId" enclosevalueinquotes="true" value="{{Id}}"/>
														<update valuesource="fieldvalue" field="masterPageName" enclosevalueinquotes="true" value="{{Name}}"/>
														<update valuesource="fieldvalue" value="{{Name}}_{{$Model.variableStore.data.0.newName}}" field="newName" enclosevalueinquotes="true"/>
													</updates>
												</action>
												<action type="closeModals" closebehavior="close"/>
												<action type="custom" snippet="normalPageToChildPage">
													<onerroractions>
														<action type="blockUI" message="There was an error. Ensure that your chosen master page has page regions." timeout="2000"/>
													</onerroractions>
												</action>
												<action type="action-sequence" action-sequence-id="08bc0954-07ab-4042-93dd-f4b3266dbdf3">
													<inputs>
														<input name="newPageName" value="{{$Model.variableStore.data.0.masterPageName}}-{{name}}"/>
													</inputs>
												</action>
											</actions>
										</action>
									</rowActions>
									<renderConditions logictype="and"/>
									<conditions/>
									<sorting/>
									<filtering enableSearch="true" searchMethod="server">
										<searchFields/>
									</filtering>
									<exportProperties useTableColumns="true" enableExportOptionOnTable="false"/>
									<styles>
										<spacing/>
									</styles>
								</skuid__table>
							</components>
						</skuid__modal>
					</action>
				</actions>
				<description>This popup allows users to pick a master page for normal-page-to-child-page conversion. The selected page is sent to the variable store.</description>
			</actionsequence>
			<actionsequence id="25e9872b-0c61-4447-81f4-4325508f5578" label="clearVariableStore" type="reusable" uniqueid="sk-3Tqu-4753">
				<actions>
					<action type="emptyModelData">
						<models>
							<model>variableStore</model>
						</models>
					</action>
				</actions>
				<description>An easy to remember action to clearing the variable store to ensure we always only have one row.</description>
			</actionsequence>
			<actionsequence id="08bc0954-07ab-4042-93dd-f4b3266dbdf3" label="promptForName" type="reusable" uniqueid="sk-Nb7-403">
				<actions>
					<action type="showModal">
						<skuid__modal title="Page" width="90%">
							<components>
								<skuid__text uniqueid="sk-3Uno-3087" contents="What would you like to name the name page?"/>
								<skuid__form uniqueid="sk-3Unk-3049" model="variableStore" mode="edit" labelPlacement="beside" showHeader="true" showSaveCancel="false" showErrorsInline="true">
									<columns>
										<column maxWidth="100%">
											<sections>
												<section collapsible="no" showHeading="false" title="Section A">
													<fields>
														<skuid__field uniqueid="sk-3Unn-3082" id="newName"/>
													</fields>
												</section>
											</sections>
										</column>
									</columns>
								</skuid__form>
								<skuid__buttonSet uniqueid="sk-3UoV-4666" model="variableStore">
									<groups>
										<skuid__buttonGroup>
											<buttons>
												<skuid__button uniqueid="sk-3UoV-4671" label="Save" styleSettingsVariant="primary">
													<actions>
														<action type="action-sequence" action-sequence-id="8dabbb26-bf41-4f73-97b0-ef87a3d05ca9"/>
														<action type="closeModals" closebehavior="close"/>
													</actions>
												</skuid__button>
												<skuid__button uniqueid="sk-3UoV-4675" label="Cancel" styleSettingsVariant="primary">
													<actions>
														<action type="action-sequence" action-sequence-id="25e9872b-0c61-4447-81f4-4325508f5578"/>
														<action type="closeAllPopups"/>
													</actions>
												</skuid__button>
											</buttons>
										</skuid__buttonGroup>
									</groups>
								</skuid__buttonSet>
							</components>
						</skuid__modal>
					</action>
				</actions>
				<description>Prompts the user for the name of their converted page. Uses the variable store and calls the createNewPageFromConvertedContent action sequence. Name defaults are set in the row actions.</description>
			</actionsequence>
			<actionsequence id="7985ede6-a4b4-4f6e-8c56-8674c3e389f7" label="Convert to normal page" type="reusable" uniqueid="sk-NdC-1616">
				<actions>
					<action type="action-sequence" action-sequence-id="25e9872b-0c61-4447-81f4-4325508f5578"/>
					<action type="createRow" model="variableStore" appendorprepend="prepend" defaultmodefornewitems="edit" affectedrows="context">
						<defaults>
							<default valuesource="fieldvalue" field="newName" enclosevalueinquotes="true" value="{{Name}}-Detached"/>
							<default valuesource="fieldvalue" field="apiVersion" enclosevalueinquotes="true" value="{{$Input.apiVersion}}"/>
						</defaults>
					</action>
					<action type="action-sequence" action-sequence-id="0df7a4d6-1aea-4bba-a5f6-07e62f5b5f7b">
						<inputs>
							<input name="pageId" value="{{$Input.Id}}"/>
							<input name="Id" value="{{$Input.Id}}"/>
						</inputs>
					</action>
					<action type="custom" snippet="childPageToNormalPage">
						<onerroractions>
							<action type="blockUI" message="There was an error" timeout="3000"/>
						</onerroractions>
					</action>
					<action type="action-sequence" action-sequence-id="08bc0954-07ab-4042-93dd-f4b3266dbdf3"/>
				</actions>
				<description>The row action to a convert a child page to a normal page</description>
				<inputs>
					<input type="value" name="Id"/>
					<input type="value" name="apiVersion"/>
				</inputs>
			</actionsequence>
			<actionsequence id="5471bffe-9f90-4148-a366-6236fd20f4f2" label="Convert to child page" uniqueid="sk-NdC-1617" type="reusable">
				<actions>
					<action type="action-sequence" action-sequence-id="25e9872b-0c61-4447-81f4-4325508f5578"/>
					<action type="createRow" model="variableStore" appendorprepend="prepend" defaultmodefornewitems="edit" affectedrows="context">
						<defaults>
							<default valuesource="fieldvalue" field="newName" enclosevalueinquotes="true" value="{{Name}}"/>
							<default valuesource="fieldvalue" field="apiVersion" enclosevalueinquotes="true" value="{{$Input.apiVersion}}"/>
						</defaults>
					</action>
					<action type="action-sequence" action-sequence-id="0df7a4d6-1aea-4bba-a5f6-07e62f5b5f7b">
						<inputs>
							<input name="pageId" value="{{$Input.Id}}"/>
						</inputs>
					</action>
					<action type="action-sequence" action-sequence-id="3fd5a006-aecc-4f5a-88bc-0f21be565b1e"/>
				</actions>
				<description>The row action to convert a normal page to a child page.</description>
				<inputs>
					<input type="value" name="Id"/>
					<input type="value" name="apiVersion"/>
				</inputs>
			</actionsequence>
			<actionsequence id="0df7a4d6-1aea-4bba-a5f6-07e62f5b5f7b" label="Query SF XML and update variable store" type="reusable" uniqueid="sk-NkU-427">
				<actions>
					<action type="emptyModelData">
						<models>
							<model>pages_retrieveXML</model>
						</models>
					</action>
					<action type="updateCondition" model="pages_retrieveXML" value="{{$Input.Id}}" condition="Id" behavior="set" valuesource="fieldvalue"/>
					<action type="requeryModels" behavior="standard">
						<models>
							<model>pages_retrieveXML</model>
						</models>
					</action>
					<action type="action-sequence" action-sequence-id="3d565e23-0f20-47e2-8a77-f9d651b777fe">
						<inputs>
							<input name="pagetype" value="standard"/>
						</inputs>
					</action>
				</actions>
				<description>This action sequence allows for the conversion sequences to remain universal between Platform and Skuid on SF.</description>
				<inputs>
					<input type="value" name="Id"/>
				</inputs>
			</actionsequence>
			<actionsequence id="3d565e23-0f20-47e2-8a77-f9d651b777fe" label="getLayoutFieldsAndUpdateVariableStore" type="reusable">
				<description/>
				<actions>
					<action type="custom" snippet="getLayoutFieldsAndUpdateVariableStore"/>
				</actions>
				<inputs>
					<input type="value" name="pagetype"/>
				</inputs>
			</actionsequence>
		</actionsequences>
		<labels/>
	</resources>
</skuid__page>